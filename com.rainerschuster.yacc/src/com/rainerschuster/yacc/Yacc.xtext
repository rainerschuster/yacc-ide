grammar com.rainerschuster.yacc.Yacc //with org.eclipse.xtext.common.Terminals
 hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate yacc "http://www.rainerschuster.com/yacc/Yacc"

// TODO page 82: Explicit names are declared as a bracketed name after a symbol appearance in rule definitions.
// TODO cf. Antlr grammar

Specification:
	{Specification} definitions+=Definition* ('%%'|'\\\\') body+=RuleOrDefinition* tail=Tail?
;

Tail:
	// After the delimiter any token should be matched until the end of file
	('%%'|'\\\\') (LITERAL|BLOCK|CODE|ID|INT|STRING|ML_COMMENT|SL_COMMENT|WS|ANY_OTHER|','|'%%'|'\\\\'|'<'|'>'|':'|'|'|';'|'='|'*')*
;

// TODO cf. 3.7.12 Bison Declaration Summary
Definition:
	(
// grammar declarations:
	StartDefinition
	| UnionDefinition
	| CodeDefinition
	| PrecedenceDefinition
	| TokenDefinition
	| TypeDefinition

	| BisonCodeDefinition
	| BisonDefaultPrecDefinition
	| DestructorDefinition
	| BisonNoDefaultPrecDefinition
	| BisonNtermDefinition
	| BisonPrinterDefinition

// prologue declarations:
//	| CodeDefinition
// TODO %<flag>
	| BisonDebugDefinition // TODO Not found in grammar, only in doc
	| BisonDefineDefinition
	| BisonDefinesDefinition
	| BisonErrorVerboseDefinition
	| ExpectDefinition
	| ExpectRrDefinition
	| BisonFilePrefixDefinition
	| BisonGlrParserDefinition
	| IdentDefinition
	| BisonInitialActionDefinition
	| BisonLanguageDefinition
	| LexParamDefinition
	| LocationsDefinition
	| BisonNamePrefixDefinition
	| BisonNoLinesDefinition
	| BisonNondeterministicParserDefinition
	| BisonOutputDefinition
	| BisonParamDefinition
	| ParseParamDefinition
	| PureParserDefinition
	| BisonRequireDefinition
	| BisonSkeletonDefinition
	| TokenTableDefinition
	| BisonVerboseDefinition
	| BisonYaccDefinition
//	| PrecedenceDefinition
	)';'?
;

StartDefinition:
	'%start' start=Symbol
;

UnionDefinition:
	'%union' assignment?='='? union=BLOCK
;

PrecedenceDefinition:
	/*definitions+=Def**/ rword=RWord tag=Tag? symbols+=SymbolWithPrecedence (','? symbols+=SymbolWithPrecedence)*
;

BisonNtermDefinition:
	'%nterm' /*tag=Tag?*/ symbols+=SymbolDefinition+
;

TokenDefinition:
	'%token' /*tag=Tag?*/ symbols+=SymbolDefinition+
;

TypeDefinition:
	'%type' tag=Tag? symbols+=Symbol+
;

enum BisonCodeQualifier:
	REQUIRES='requires'
	| PROVIDES='provides'
	| TOP='top'
	| IMPORTS='imports'
;

BisonCodeDefinition:
	'%code' qualifier=BisonCodeQualifier? code=BLOCK
;

BisonDebugDefinition:
	{BisonDebugDefinition} '%debug'
;

BisonDefaultPrecDefinition:
	{BisonDefaultPrecDefinition} '%default-prec'
;

BisonDefineDefinition:
	'%define' variable=Variable value=Value?
;

BisonDefinesDefinition:
	{BisonDefinesDefinition}'%defines' defines=STRING?
;

DestructorDefinition:
	'%destructor' code=BLOCK symbols+=GenericSymbol+
;

BisonErrorVerboseDefinition:
	{BisonErrorVerboseDefinition}'%error-verbose'
;

ExpectDefinition:
	'%expect' number=INT
;

ExpectRrDefinition:
	'%expect-rr' number=INT
;

BisonFilePrefixDefinition:
	'%file-prefix' prefix=STRING
;

BisonGlrParserDefinition:
	{BisonGlrParserDefinition}'%glr-parser'
;

// TODO Where is this defined?
IdentDefinition:
	('%ident'
	| '%IDENT')
		ident=STRING
;

BisonInitialActionDefinition:
	'%initial-action' action=BLOCK
;

BisonLanguageDefinition:
	'%language' language=STRING
;

LexParamDefinition:
	('%lex-param'
	| '%lex_param' // TODO is this valid?
	| '%LEX_PARAM') // TODO is this valid?
		argumentDeclarations+=BLOCK+
;

LocationsDefinition:
	{LocationsDefinition} ('%locations'
	| '%LOCATIONS') // TODO is this valid?
;

BisonNamePrefixDefinition:
	'%name-prefix' prefix=STRING
;

BisonNoDefaultPrecDefinition:
	{BisonNoDefaultPrecDefinition} '%no-default-prec'
;

BisonNoLinesDefinition:
	{BisonNoLinesDefinition} '%no-lines'
;

BisonNondeterministicParserDefinition:
	{BisonNondeterministicParserDefinition} '%nondeterministic-parser'
;

BisonOutputDefinition:
	'%output' file=STRING
;

BisonParamDefinition:
	'%param' argumentDeclarations+=BLOCK+
;

ParseParamDefinition:
	('%parse-param'
	| '%parse_param' // TODO is this valid?
	| '%PARSE_PARAM') // TODO is this valid?
		argumentDeclarations+=BLOCK+
;

BisonPrinterDefinition:
	'%printer' code=BLOCK symbols+=GenericSymbol+
;

PureParserDefinition:
	{PureParserDefinition} ('%pure-parser'
	| '%pure_parser' // TODO is this valid?
	| '%PURE_PARSER') // TODO is this valid?
;

BisonRequireDefinition:
	'%require' version=STRING
;

BisonSkeletonDefinition:
	'%skeleton' file=STRING
;

TokenTableDefinition:
	{TokenTableDefinition} '%token-table'
;

BisonVerboseDefinition:
	{BisonVerboseDefinition} '%verbose'
;

BisonYaccDefinition:
	{BisonYaccDefinition} '%yacc'
;



// TODO Bison helper
Symbol:
	ref=[NamedElement|ID]
//	| ref=[NamedElement|Tag]
	| refString=[StringAlias|STRING]
//	| ref=[NamedElement|STRING]
	| literal=LITERAL
//	id=ID
////	| literal=LITERAL
//	| string=STRING
;

// TODO Bison helper
// TODO Are those elements really definitions (name=) or are they references (=Symbol)
SymbolWithPrecedence:
//	symbol=Symbol precedence=INT?
	name=ID precedence=INT?
	| name=STRING precedence=INT?
	| name=LITERAL precedence=INT?
;

// TODO Bison helper
// TODO this should be a reference
GenericSymbol:
	Symbol
	| {TagSymbol} tag=Tag
;

// TODO Bison helper
Variable:
	id=ID
	| literal=LITERAL
	| string=STRING
;

// TODO Bison helper
Value:
	id=ID
	| literal=LITERAL
	| string=STRING
//	| ReferenceOrLiteral
	| code=BLOCK
;

CodeDefinition:
	code=CODE
;

//RWord:
//	'%' ID
//;
enum RWord:
/*	TOKEN='%token'
	|*/ LEFT='%left' | LEFT='%<'
	| RIGHT='%right' | RIGHT='%>'
	| NONASSOC='%nonassoc'
	| PRECEDENCE='%precedence'
//	| TYPE='%type'
;

Tag:
	'<' Identifier '>'
	| '<' '*' '>' // default tagged
	| '<' '>' // default tagless
;

SymbolDefinition:
	name=Identifier number=INT?
	| idName=IdName number=INT? string=StringAlias
	| name=Tag
;

IdName:
	name=Identifier
;

// TODO This is a workaround since two names are defined for the same symbol
StringAlias:
	 name=STRING
;

RuleOrDefinition:
	Rule
	| Definition
;

Rule:
	name=ID ':' alternatives+=RuleBody ('|' alternatives+=RuleBody)*
;

RuleBody:
	{RuleBody} rbody+=RuleBodyElement* precedence=Precedence?
;

RuleBodyElement:
	{RuleError}'error'
	| {RuleEmpty}'%empty'
	| {RuleReference}ref=Symbol
	| Action
;

Action:
	action=BLOCK
;

Precedence:
	{Precedence} ('%prec' ref=Symbol action=Action?) semi?=';'?
	| {Precedence} semi?=';'
;

NamedElement:
	Rule
	| SymbolDefinition
//	| StringAlias
	| IdName
	| SymbolWithPrecedence
;

//ReferenceOrLiteral:
//	ref=[NamedElement|ID]
//	| literal=LITERAL
//	| string=STRING
//;

Identifier:
	ID | LITERAL
;

// TODO validate: Only numbers may have more than one character!
terminal LITERAL:
	"'" ( '\\' .+ | !('\\'|"'") ) "'"
;

//terminal BLOCK	: '{' -> '}';
terminal BLOCK	: '{' (BLOCK|!('{'|'}'))* '}'; // TODO "*" or "*?"?
terminal CODE	: '%{' -> '%}';


terminal ID  		: ('a'..'z'|'A'..'Z'|'_'|'.') ('a'..'z'|'A'..'Z'|'_'|'.'|'0'..'9')*;
terminal INT returns ecore::EInt: ('0'..'9')+;
terminal STRING	:
			'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"'
		;
terminal ML_COMMENT	: '/*' -> '*/';
terminal SL_COMMENT 	: '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS			: (' '|'\t'|'\r'|'\n')+;

//terminal TAIL:
//	'%%' (!'%%')* EOF
//;

terminal ANY_OTHER: .;
