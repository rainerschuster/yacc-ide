grammar com.rainerschuster.yacc.Yacc //with org.eclipse.xtext.common.Terminals
 hidden(WS, ML_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate yacc "http://www.rainerschuster.com/yacc/Yacc"

Specification:
	{Specification} definitions+=Definition* '%%' rules+=Rule* tail=Tail?
;

Tail:
	// After the delimiter any token should be matched until the end of file
	'%%' (LITERAL|BLOCK|CODE|ID|INT|/*STRING|*/ML_COMMENT|WS|ANY_OTHER|','|'%%'|'<'|'>'|':'|'|'|';')*
;

Definition:
	StartDefinition
	| UnionDefinition
	| CodeDefinition
	| RWordDefinition
;

StartDefinition:
	'%start' start=[Rule|ID]
;

UnionDefinition:
	'%union' union=BLOCK
;

RWordDefinition:
	/*definitions+=Def**/ rword=RWord tag=Tag? nlist+=Nmno (','? nlist+=Nmno)*
;

CodeDefinition:
	code=CODE
;

enum RWord:
	TOKEN='%token'
	| LEFT='%left'
	| RIGHT='%right'
	| NONASSOC='%nonassoc'
	| TYPE='%type'
;

Tag:
	'<' Identifier '>'
;

Nmno:
	name=Identifier /* NOTE: literal illegal with %type */
	| name=Identifier number=INT /* NOTE: illegal with %type */
;

Rule:
	name=ID ':' alternatives+=RuleBody ('|' alternatives+=RuleBody)*
;

RuleBody:
	{RuleBody} rbody+=RuleBodyElement* precedence=Precedence?
;

RuleBodyElement:
	{RuleError}'error'
	| {RuleReference}ref=ReferenceOrLiteral
	| Action
;

Action:
	action=BLOCK
;

Precedence:
	{Precedence} ('%prec' ref=ReferenceOrLiteral action=Action?) ';'?
	| {Precedence} ';'
;

NamedElement:
	Rule
	| Nmno
;

ReferenceOrLiteral:
	ref=[NamedElement|ID]
	| literal=LITERAL
;

Identifier:
	ID | LITERAL
;

terminal LITERAL:
	"'" ( '\\' . | !('\\'|"'") ) "'"
;

//terminal BLOCK	: '{' -> '}';
terminal BLOCK	: '{' (BLOCK|!('{'|'}'))* '}'; // TODO "*" or "*?"?
terminal CODE	: '%{' -> '%}';


terminal ID  		: ('a'..'z'|'A'..'Z'|'_'|'.') ('a'..'z'|'A'..'Z'|'_'|'.'|'0'..'9')*;
terminal INT returns ecore::EInt: ('0'..'9')+;
//terminal STRING	: 
//			'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"'
//		;
terminal ML_COMMENT	: '/*' -> '*/';
//terminal SL_COMMENT 	: '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS			: (' '|'\t'|'\r'|'\n')+;

//terminal TAIL:
//	'%%' (!'%%')* EOF
//;

terminal ANY_OTHER: .;
